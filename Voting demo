import multiprocessing
import random

class Voter(multiprocessing.Process):
    def __init__(self, voter_id, candidates, quorum, results_queue):
        super(Voter, self).__init__()

        self.voter_id = voter_id
        self.candidates = candidates
        self.quorum = quorum
        self.results_queue = results_queue

    def run(self):
        # Each voter selects a candidate randomly
        candidate = random.choice(self.candidates)
        self.results_queue.put(candidate)

def distributed_voting(candidates, num_voters, quorum):
    # Create a multiprocessing queue for collecting results
    results_queue = multiprocessing.Queue()

    # Create and start the voters
    voters = []
    for i in range(num_voters):
        voter = Voter(i, candidates, quorum, results_queue)
        voters.append(voter)
        voter.start()

    # Wait for all voters to finish
    for voter in voters:
        voter.join()

    # Collect the results from the queue
    results = []
    while not results_queue.empty():
        result = results_queue.get()
        results.append(result)

    # Count the votes for each candidate
    vote_counts = {candidate: results.count(candidate) for candidate in candidates}

    # Find the winner
    winner = max(vote_counts, key=vote_counts.get)

    # Print the results
    print("Voting Results:")
    for candidate in candidates:
        print(f"{candidate}: {vote_counts[candidate]} votes")
    print(f"\nWinner: {winner}")

# Example usage
candidates = ["Annie", "Justin", "Cathy"]
num_voters = 300
quorum = 100

distributed_voting(candidates, num_voters, quorum)
